apiVersion: skaffold/v4beta12
kind: Config
metadata:
  name: etcd-druid
build:
  local: { }
  artifacts:
    - image: local-skaffold/etcd-druid
      ko:
        dependencies:
          paths:
            - api/core/v1alpha1
            - api/config/v1alpha1
            - cmd
            - internal
            - VERSION
        flags:
          - -v
        ldflags:
          - '{{.LD_FLAGS}}'
        main: ./cmd
deploy:
  helm:
    releases:
      - name: etcd-druid
        chartPath: charts
        setValues:
          foo: bar # empty `setValues` value is not allowed
        setValueTemplates:
          image.repository: '{{.IMAGE_REPO_local_skaffold_etcd_druid}}'
          image.tag: '{{.IMAGE_TAG_local_skaffold_etcd_druid}}@{{.IMAGE_DIGEST_local_skaffold_etcd_druid}}'
        skipBuildDependencies: true
        createNamespace: true
        wait: true
#
# WARNING: Each 'add' op overrides the previous 'add' op(s) on the same field even across profiles.
# Consider the following example:
# - profile: name: bingo, op: add, path: /deploy/helm/releases/0/setValues/controllers, value: etcd.etcdStatusSyncPeriod: 5s
# - profile: name: tringo, op: add, path: /deploy/helm/releases/0/setValues/controllers, value: etcd.etcdMemberNotReadyThreshold: 10m
#  If both 'bingo' and 'tringo' profiles are activated then final set values will look like the following:
# - /deploy/helm/releases/0/setValues/controllers/etcd/etcdMemberNotReadyThreshold: 10m
# The second add op overrides the first add op since the path fields '/deploy/helm/releases/0/setValues/controllers' is same for both.
# 'add' operation can only add one sub-field to 'setValues' at a time, so we cannot specify path as '/deploy/helm/releases/0/setValues/controllers/etcd'
# unless an empty 'controllers' map has already been added.
#
profiles:
  # Profile to disable druid leader election, to allow debugging without abrupt exits due to failure to renew leader election lease within time.
  - name: debug
    patches:
      - op: add
        path: /deploy/helm/releases/0/setValues/replicas
        value: 1
      - op: add
        path: /deploy/helm/releases/0/setValues/controllerManager
        value:
          leaderElection.enabled: false
      - op: add
        path: /deploy/helm/release/0/setValues/operatorConfig
        value:
          leaderElection.enabled: false
  - name: e2e-test
    activation:
      - env: DRUID_E2E_TEST=true
    patches:
      - op: add
        path: /deploy/helm/releases/0/setValues/operatorConfig
        value:
          controllers.etcd.etcdStatusSyncPeriod: 5s
          controllers.compaction.eventsThreshold: "15"
          controllers.compaction.triggerFullSnapshotThreshold: "45"
          controllers.compaction.metricsScrapeWaitDuration: 30s
      - op: add
        path: /deploy/helm/releases/0/setValues/controllers
        value:
          etcd.workers: 10
          etcd.etcdStatusSyncPeriod: 5s
          compaction.etcdEventsThreshold: "15"
          compaction.metricsScrapeWaitDuration: 30s
  - name: enable-etcdcomponentprotection-webhook
    activation:
      - env: ENABLE_ETCD_COMPONENT_PROTECTION_WEBHOOK=true
    patches:
      - op: add
        path: /deploy/helm/releases/0/setValues/webhooks
        value:
          etcdComponentProtection.enabled: true
      - op: add
        path: /deploy/helm/releases/0/setValues/operatorConfig
        value:
          webhooks.etcdComponentProtection.enabled: true
---
apiVersion: skaffold/v4beta12
kind: Config
metadata:
  name: druid-e2e
deploy:
  kubectl:
    hooks:
      before:
        - host:
            command:
              - sh
              - -c
              - |
                echo "Deleting previous job"
                namespace_flag=${SKAFFOLD_NAMESPACES:-""}
                if [ -n "$namespace_flag" ]; then
                  namespace_flag="-n ${namespace_flag}"
                fi
                kubectl delete job -l role=infra-job --ignore-not-found=true $namespace_flag
      after:
        - host:
            command:
              - sh
              - -c
              - |
                echo "Wait until job is ready"
                namespace_flag=${SKAFFOLD_NAMESPACES:-""}
                if [ -n "$namespace_flag" ]; then
                  namespace_flag="-n ${namespace_flag}"
                fi
                kubectl wait --for=condition=Complete job -l role=infra-job --timeout=5m $namespace_flag
            os: [ darwin, linux ]
profiles:
  # Profile to create the required S3 backup bucket for an e2e test.
  - name: aws-setup
    manifests:
      kustomize:
        paths:
          - hack/e2e-test/infrastructure/overlays/aws/setup
  # Profile to delete the S3 backup bucket from an e2e test.
  - name: aws-cleanup
    manifests:
      kustomize:
        paths:
          - hack/e2e-test/infrastructure/overlays/aws/cleanup
  # Profile to create the required Azure storage container for an e2e test.
  - name: azure-setup
    manifests:
      kustomize:
        paths:
          - hack/e2e-test/infrastructure/overlays/azure/setup
  # Profile to delete the Azure storage container from an e2e test.
  - name: azure-cleanup
    manifests:
      kustomize:
        paths:
          - hack/e2e-test/infrastructure/overlays/azure/cleanup
  # Profile to create the required GCP backup bucket for an e2e test.
  - name: gcp-setup
    manifests:
      kustomize:
        paths:
          - hack/e2e-test/infrastructure/overlays/gcp/setup
      hooks:
        before:
          - host:
              command:
                - sh
                - -c
                - |
                  echo "Copying GCP service account json" &&
                  touch "hack/e2e-test/infrastructure/overlays/gcp/common/assets/serviceaccount.json" && 
                  cp "$GCP_SERVICEACCOUNT_JSON_PATH" "hack/e2e-test/infrastructure/overlays/gcp/common/assets/serviceaccount.json"
              os: [ darwin, linux ]
  # Profile to delete the GCP backup bucket from an e2e test.
  - name: gcp-cleanup
    manifests:
      kustomize:
        paths:
          - hack/e2e-test/infrastructure/overlays/gcp/cleanup
      hooks:
        before:
          - host:
              command:
                - sh
                - -c
                - |
                  echo "Copying GCP service account json" && 
                  touch "hack/e2e-test/infrastructure/overlays/gcp/common/assets/serviceaccount.json" && 
                  cp "$GCP_SERVICEACCOUNT_JSON_PATH" "hack/e2e-test/infrastructure/overlays/gcp/common/assets/serviceaccount.json"
              os: [ darwin, linux ]
  # Profile to create the required Local storage container for an e2e test.
  - name: local-setup
    manifests:
      kustomize:
        paths:
          - hack/e2e-test/infrastructure/overlays/local/setup
  # Profile to delete the Local storage container from an e2e test.
  - name: local-cleanup
    manifests:
      kustomize:
        paths:
          - hack/e2e-test/infrastructure/overlays/local/cleanup
