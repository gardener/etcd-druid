apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ .Values.cronJobName }}
  namespace: {{ .Release.Namespace }}
  annotations:
    gardener.cloud/owned-by: "{{ .Release.Namespace }}/{{ .Values.name }}"
    gardener.cloud/owner-type: "etcd"
{{- if .Values.annotations }}
{{ toYaml .Values.annotations | indent 4 }}
{{- end }}
  labels:
    name: etcd
    instance: {{ .Values.name }}
{{- if .Values.labels }}
{{ toYaml .Values.labels | indent 4 }}
{{- end }}
  ownerReferences:
  - apiVersion: druid.gardener.cloud/v1alpha1
    blockOwnerDeletion: true
    controller: true
    kind: Etcd
    name: {{ .Values.name }}
    uid: {{ .Values.uid }}
spec:
  schedule: {{ .Values.backup.backupCompactionSchedule }} 
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        metadata:
          annotations:
            checksum/etcd-configmap: {{ include (print $.Template.BasePath "/etcd-configmap.yaml") . | sha256sum }}
{{- if .Values.annotations }}
{{ toYaml .Values.annotations | indent 12 }}
{{- end }}
          labels:
            name: etcd
            instance: {{ .Values.name }}
{{- if .Values.labels }}
{{ toYaml .Values.labels | indent 12 }}
{{- end }}
        spec:
          restartPolicy: Never
          containers:
          - name: compact-backup
            image: {{ .Values.backup.image }} 
            imagePullPolicy: {{ .Values.backup.pullPolicy }} 
            command:
            - etcdbrctl
            - compact
            - --data-dir=/var/etcd/data/new.etcd
{{- if  .Values.store.storageProvider }}
            - --storage-provider={{ .Values.store.storageProvider }}
{{- end }}
{{- if .Values.store.storePrefix }}
            - --store-prefix={{ .Values.store.storePrefix }}
{{- end }}
{{- if .Values.backup.etcdQuotaBytes }}
            - --embedded-etcd-quota-bytes={{ int $.Values.backup.etcdQuotaBytes }}
{{- end }}
{{- if .Values.store.storageContainer }}
            - --store-container={{ .Values.store.storageContainer }}
{{- end }}
            ports:
            - containerPort: {{ .Values.backup.port }}
              name: server
              protocol: TCP
            resources:
{{ toYaml .Values.backup.resources | indent 14 }}
            env:
            - name: STORAGE_CONTAINER
              value: {{ .Values.store.storageContainer }}
{{- if eq .Values.store.storageProvider "S3" }}
            - name: "AWS_REGION"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.store.storeSecret }}
                  key: "region"
            - name: "AWS_SECRET_ACCESS_KEY"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.store.storeSecret }}
                  key: "secretAccessKey"
            - name: "AWS_ACCESS_KEY_ID"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.store.storeSecret }}
                  key: "accessKeyID"
{{- else if eq .Values.store.storageProvider "ABS" }}
            - name: "STORAGE_ACCOUNT"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.store.storeSecret }}
                  key: "storageAccount"
            - name: "STORAGE_KEY"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.store.storeSecret }}
                  key: "storageKey"
{{- else if eq .Values.store.storageProvider "GCS" }}
            - name: "GOOGLE_APPLICATION_CREDENTIALS"
              value: "/root/.gcp/serviceaccount.json"
{{- else if eq .Values.store.storageProvider "Swift" }}
            - name: "OS_AUTH_URL"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.store.storeSecret }}
                  key: "authURL"
            - name: "OS_DOMAIN_NAME"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.store.storeSecret }}
                  key: "domainName"
            - name: "OS_USERNAME"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.store.storeSecret }}
                  key: "username"
            - name: "OS_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.store.storeSecret }}
                  key: "password"
            - name: "OS_TENANT_NAME"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.store.storeSecret }}
                  key: "tenantName"
{{- else if eq .Values.store.storageProvider "OSS" }}
            - name: "ALICLOUD_ENDPOINT"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.store.storeSecret }}
                  key: "storageEndpoint"
            - name: "ALICLOUD_ACCESS_KEY_SECRET"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.store.storeSecret }}
                  key: "accessKeySecret"
            - name: "ALICLOUD_ACCESS_KEY_ID"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.store.storeSecret }}
                  key: "accessKeyID"
{{- else if eq .Values.store.storageProvider "ECS" }}
            - name: "ECS_ENDPOINT"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.store.storeSecret }}
                  key: "endpoint"
            - name: "ECS_ACCESS_KEY_ID"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.store.storeSecret }}
                  key: "accessKeyID"
            - name: "ECS_SECRET_ACCESS_KEY"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.store.storeSecret }}
                  key: "secretAccessKey"
{{- else if eq .Values.store.storageProvider "OCS" }}
            - name: "OCS_ENDPOINT"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.store.storeSecret }}
                  key: "endpoint"
            - name: "OCS_ACCESS_KEY_ID"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.store.storeSecret }}
                  key: "accessKeyID"
            - name: "OCS_SECRET_ACCESS_KEY"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.store.storeSecret }}
                  key: "secretAccessKey"
            - name: "OCS_REGION"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.store.storeSecret }}
                  key: "region"
            - name: "OCS_DISABLE_SSL"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.store.storeSecret }}
                  key: "disableSSL"
                  optional: true
            - name: "OCS_INSECURE_SKIP_VERIFY"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.store.storeSecret }}
                  key: "insecureSkipVerify"
                  optional: true
{{- end }}
            volumeMounts:
            - name: etcd-config-file
              mountPath: /var/etcd/config/
{{- if eq .Values.store.storageProvider "GCS" }}
            - name: etcd-backup
              mountPath: "/root/.gcp/"
{{- end }}
          volumes:
          - name: etcd-config-file
            configMap:
              name: {{ .Values.configMapName }}
              defaultMode: 0644
              items:
              - key: etcd.conf.yaml
                path: etcd.conf.yaml
{{- if eq .Values.store.storageProvider "GCS" }}
          - name: etcd-backup
            secret:
              secretName: {{ .Values.store.storeSecret }}
{{- end }}