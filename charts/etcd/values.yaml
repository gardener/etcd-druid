name: test
uid: uuid-of-etcd-resource
serviceName: test
configMapName: test
jobName: test
serviceAccountName: test
disableEtcdServiceAccountAutomount: false

replicas: 1
#priorityClassName: foo

clientUrlTlsCASecret: etcd-client-ca
clientUrlTlsServerSecret: etcd-client-server
clientUrlTlsClientSecret: etcd-client-client

clientTlsCASecretKey: ca.crt

peerUrlTlsCASecret: etcd-peer-ca
peerUrlTlsServerSecret: etcd-peer-server

peerTlsCASecretKey: ca.crt

annotations: {}
labels: {}

etcd:
  initialClusterToken: initial
  initialClusterState: new
  enableClientTLS: false
  enablePeerTLS: false
  pullPolicy: IfNotPresent
  metrics: basic
  etcdDefragTimeout: 8m
  resources:
    requests:
      cpu: 50m
      memory: 128Mi
  #username: username
  #password: password
  heartbeatDuration: 10s

backup:
  port: 8080
  enableTLS: false
  pullPolicy: IfNotPresent
  snapstoreTempDir: "/var/etcd/data/temp"
  etcdConnectionTimeout: 5m
  etcdQuotaBytes: 8Gi
  enableProfiling: false
  garbageCollectionPolicy: LimitBased
  maxBackups: 7
  etcdSnapshotTimeout: 8m
  resources:
    requests:
      cpu: 50m
      memory: 128Mi
  compactionResources:
    requests:
      cpu: 500m
      memory: 3Gi
  # compression:
  #   enabled: true
  #   policy: "gzip"
  # ownerCheck:
  #   name: "owner.foo.example.com"
  #   id: "bar"
  #   interval: 30s
  #   timeout: 2m
  #   dnsCacheTTL: 1m
  # leaderElection:
  #   reelectionPeriod: 5s
  #   etcdConnectionTimeout: 5s

# sharedConfig defines parameters shared and used by Etcd as well as backup-restore sidecar.
sharedConfig:
  # autoCompaction defines the specification to be used by Etcd as well as by embedded-Etcd of backup-restore sidecar during restoration.
  # auto-compaction mode: 'periodic' mode or 'revision' mode for etcd as well as for embedded-Etcd of backup-restore sidecar.
  # auto-compaction retention length for etcd as well as for embedded-Etcd of backup-restore sidecar.
  autoCompactionMode: periodic
  autoCompactionRetention: "30m"

schedulingConstraints: {}
  ## affinity defines the various affinity and anti-affinity rules for a pod
  ## that are honoured by the kube-scheduler.
  # affinity:
  #   podAffinity:
  #     requiredDuringSchedulingIgnoredDuringExecution:
  #     - labelSelector:
  #         matchExpressions:
  #         - key: key
  #           operator: In
  #           values:
  #           - value
  #       topologyKey: topology.kubernetes.io/zone
  ## topologySpreadConstraints describes how a group of pods ought to spread across topology domains,
  ## that are honoured by the kube-scheduler.
  # topologySpreadConstraints:
  # - maxSkew: 1
  #   topologyKey: topology.kubernetes.io/zone
  #   whenUnsatisfiable: DoNotSchedule
  #   labelSelector:
  #     matchLabels:
  #       key: value

volumeClaimTemplateName: test
storageClass: ""
storageCapacity: 16Gi

store:
  storageProvider: ""
  storePrefix: ""
  storageContainer: ""
