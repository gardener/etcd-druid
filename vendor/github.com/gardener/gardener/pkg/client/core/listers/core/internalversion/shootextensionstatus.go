/*
Copyright (c) SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package internalversion

import (
	core "github.com/gardener/gardener/pkg/apis/core"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ShootExtensionStatusLister helps list ShootExtensionStatuses.
// All objects returned here must be treated as read-only.
type ShootExtensionStatusLister interface {
	// List lists all ShootExtensionStatuses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*core.ShootExtensionStatus, err error)
	// ShootExtensionStatuses returns an object that can list and get ShootExtensionStatuses.
	ShootExtensionStatuses(namespace string) ShootExtensionStatusNamespaceLister
	ShootExtensionStatusListerExpansion
}

// shootExtensionStatusLister implements the ShootExtensionStatusLister interface.
type shootExtensionStatusLister struct {
	indexer cache.Indexer
}

// NewShootExtensionStatusLister returns a new ShootExtensionStatusLister.
func NewShootExtensionStatusLister(indexer cache.Indexer) ShootExtensionStatusLister {
	return &shootExtensionStatusLister{indexer: indexer}
}

// List lists all ShootExtensionStatuses in the indexer.
func (s *shootExtensionStatusLister) List(selector labels.Selector) (ret []*core.ShootExtensionStatus, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*core.ShootExtensionStatus))
	})
	return ret, err
}

// ShootExtensionStatuses returns an object that can list and get ShootExtensionStatuses.
func (s *shootExtensionStatusLister) ShootExtensionStatuses(namespace string) ShootExtensionStatusNamespaceLister {
	return shootExtensionStatusNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ShootExtensionStatusNamespaceLister helps list and get ShootExtensionStatuses.
// All objects returned here must be treated as read-only.
type ShootExtensionStatusNamespaceLister interface {
	// List lists all ShootExtensionStatuses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*core.ShootExtensionStatus, err error)
	// Get retrieves the ShootExtensionStatus from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*core.ShootExtensionStatus, error)
	ShootExtensionStatusNamespaceListerExpansion
}

// shootExtensionStatusNamespaceLister implements the ShootExtensionStatusNamespaceLister
// interface.
type shootExtensionStatusNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ShootExtensionStatuses in the indexer for a given namespace.
func (s shootExtensionStatusNamespaceLister) List(selector labels.Selector) (ret []*core.ShootExtensionStatus, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*core.ShootExtensionStatus))
	})
	return ret, err
}

// Get retrieves the ShootExtensionStatus from the indexer for a given namespace and name.
func (s shootExtensionStatusNamespaceLister) Get(name string) (*core.ShootExtensionStatus, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(core.Resource("shootextensionstatus"), name)
	}
	return obj.(*core.ShootExtensionStatus), nil
}
