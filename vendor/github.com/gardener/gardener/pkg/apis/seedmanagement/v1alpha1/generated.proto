/*
Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.gardener.gardener.pkg.apis.seedmanagement.v1alpha1;

import "github.com/gardener/gardener/pkg/apis/core/v1beta1/generated.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// Gardenlet specifies gardenlet deployment parameters and the GardenletConfiguration used to configure gardenlet.
message Gardenlet {
  // Deployment specifies certain gardenlet deployment parameters, such as the number of replicas,
  // the image, etc.
  // +optional
  optional GardenletDeployment deployment = 1;

  // Config is the GardenletConfiguration used to configure gardenlet.
  // +optional
  optional k8s.io.apimachinery.pkg.runtime.RawExtension config = 2;

  // Bootstrap is the mechanism that should be used for bootstrapping gardenlet connection to the Garden cluster. One of ServiceAccount, BootstrapToken, None.
  // If set to ServiceAccount or BootstrapToken, a service account or a bootstrap token will be created in the garden cluster and used to compute the bootstrap kubeconfig.
  // If set to None, the gardenClientConnection.kubeconfig field will be used to connect to the Garden cluster. Defaults to BootstrapToken.
  // +optional
  optional string bootstrap = 3;

  // MergeWithParent specifies whether the deployment parameters and GardenletConfiguration of the parent gardenlet
  // should be merged with the specified deployment parameters and GardenletConfiguration. Defaults to true.
  // +optional
  optional bool mergeWithParent = 4;
}

// GardenletDeployment specifies certain gardenlet deployment parameters, such as the number of replicas,
// the image, etc.
message GardenletDeployment {
  // ReplicaCount is the number of gardenlet replicas. Defaults to 1.
  // +optional
  optional int32 replicaCount = 1;

  // RevisionHistoryLimit is the number of old gardenlet ReplicaSets to retain to allow rollback. Defaults to 1.
  // +optional
  optional int32 revisionHistoryLimit = 2;

  // ServiceAccountName is the name of the ServiceAccount to use to run gardenlet pods.
  // +optional
  optional string serviceAccountName = 3;

  // Image is the gardenlet container image.
  // +optional
  optional Image image = 4;

  // Resources are the compute resources required by the gardenlet container.
  // +optional
  optional k8s.io.api.core.v1.ResourceRequirements resources = 5;

  // PodLabels are the labels on gardenlet pods.
  // +optional
  map<string, string> podLabels = 6;

  // PodAnnotations are the annotations on gardenlet pods.
  // +optional
  map<string, string> podAnnotations = 7;

  // AdditionalVolumes is the list of additional volumes that should be mounted by gardenlet containers.
  // +optional
  repeated k8s.io.api.core.v1.Volume additionalVolumes = 8;

  // AdditionalVolumeMounts is the list of additional pod volumes to mount into the gardenlet container's filesystem.
  // +optional
  repeated k8s.io.api.core.v1.VolumeMount additionalVolumeMounts = 9;

  // Env is the list of environment variables to set in the gardenlet container.
  // +optional
  repeated k8s.io.api.core.v1.EnvVar env = 10;

  // VPA specifies whether to enable VPA for gardenlet. Defaults to true.
  // +optional
  optional bool vpa = 11;
}

// Image specifies container image parameters.
message Image {
  // Repository is the image repository.
  // +optional
  optional string repository = 1;

  // Tag is the image tag.
  // +optional
  optional string tag = 2;

  // PullPolicy is the image pull policy. One of Always, Never, IfNotPresent.
  // Defaults to Always if latest tag is specified, or IfNotPresent otherwise.
  // +optional
  optional string pullPolicy = 3;
}

// ManagedSeed represents a Shoot that is registered as Seed.
message ManagedSeed {
  // Standard object metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the ManagedSeed.
  // +optional
  optional ManagedSeedSpec spec = 2;

  // Most recently observed status of the ManagedSeed.
  // +optional
  optional ManagedSeedStatus status = 3;
}

// ManagedSeedList is a list of ManagedSeed objects.
message ManagedSeedList {
  // Standard list object metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is the list of ManagedSeeds.
  repeated ManagedSeed items = 2;
}

// ManagedSeedSpec is the specification of a ManagedSeed.
message ManagedSeedSpec {
  // Shoot references a Shoot that should be registered as Seed.
  optional Shoot shoot = 1;

  // SeedTemplate is a template for a Seed object, that should be used to register a given cluster as a Seed.
  // Either SeedTemplate or Gardenlet must be specified. When Seed is specified, the ManagedSeed controller will not deploy a gardenlet into the cluster
  // and an existing gardenlet reconciling the new Seed is required.
  // +optional
  optional github.com.gardener.gardener.pkg.apis.core.v1beta1.SeedTemplate seedTemplate = 2;

  // Gardenlet specifies that the ManagedSeed controller should deploy a gardenlet into the cluster
  // with the given deployment parameters and GardenletConfiguration.
  // +optional
  optional Gardenlet gardenlet = 3;
}

// ManagedSeedStatus is the status of a ManagedSeed.
message ManagedSeedStatus {
  // Conditions represents the latest available observations of a ManagedSeed's current state.
  // +patchMergeKey=type
  // +patchStrategy=merge
  // +optional
  repeated github.com.gardener.gardener.pkg.apis.core.v1beta1.Condition conditions = 1;

  // ObservedGeneration is the most recent generation observed for this ManagedSeed. It corresponds to the
  // ManagedSeed's generation, which is updated on mutation by the API Server.
  optional int64 observedGeneration = 2;
}

// Shoot identifies the Shoot that should be registered as Seed.
message Shoot {
  // Name is the name of the Shoot that will be registered as Seed.
  optional string name = 1;
}

